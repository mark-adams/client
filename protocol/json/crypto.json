{
  "protocol" : "crypto",
  "namespace" : "keybase.1",
  "types" : [ {
    "type" : "record",
    "name" : "Time",
    "fields" : [ ],
    "typedef" : "long"
  }, {
    "type" : "record",
    "name" : "StringKVPair",
    "fields" : [ {
      "name" : "key",
      "type" : "string"
    }, {
      "name" : "value",
      "type" : "string"
    } ]
  }, {
    "type" : "record",
    "name" : "Status",
    "fields" : [ {
      "name" : "code",
      "type" : "int"
    }, {
      "name" : "name",
      "type" : "string"
    }, {
      "name" : "desc",
      "type" : "string"
    }, {
      "name" : "fields",
      "type" : {
        "type" : "array",
        "items" : "StringKVPair"
      }
    } ]
  }, {
    "type" : "record",
    "name" : "UID",
    "fields" : [ ],
    "typedef" : "string"
  }, {
    "type" : "record",
    "name" : "DeviceID",
    "fields" : [ ],
    "typedef" : "string"
  }, {
    "type" : "record",
    "name" : "SigID",
    "fields" : [ ],
    "typedef" : "string"
  }, {
    "type" : "record",
    "name" : "KID",
    "fields" : [ ],
    "typedef" : "string"
  }, {
    "type" : "record",
    "name" : "Text",
    "fields" : [ {
      "name" : "data",
      "type" : "string"
    }, {
      "name" : "markup",
      "type" : "boolean"
    } ]
  }, {
    "type" : "record",
    "name" : "PGPIdentity",
    "fields" : [ {
      "name" : "username",
      "type" : "string"
    }, {
      "name" : "comment",
      "type" : "string"
    }, {
      "name" : "email",
      "type" : "string"
    } ]
  }, {
    "type" : "record",
    "name" : "PublicKey",
    "fields" : [ {
      "name" : "KID",
      "type" : "KID"
    }, {
      "name" : "PGPFingerprint",
      "type" : "string"
    }, {
      "name" : "PGPIdentities",
      "type" : {
        "type" : "array",
        "items" : "PGPIdentity"
      }
    }, {
      "name" : "isSibkey",
      "type" : "boolean"
    }, {
      "name" : "isEldest",
      "type" : "boolean"
    }, {
      "name" : "parentID",
      "type" : "string"
    }, {
      "name" : "deviceID",
      "type" : "DeviceID"
    }, {
      "name" : "deviceDescription",
      "type" : "string"
    }, {
      "name" : "deviceType",
      "type" : "string"
    }, {
      "name" : "cTime",
      "type" : "Time"
    }, {
      "name" : "eTime",
      "type" : "Time"
    } ]
  }, {
    "type" : "record",
    "name" : "User",
    "fields" : [ {
      "name" : "uid",
      "type" : "UID"
    }, {
      "name" : "username",
      "type" : "string"
    } ]
  }, {
    "type" : "record",
    "name" : "Device",
    "fields" : [ {
      "name" : "type",
      "type" : "string"
    }, {
      "name" : "name",
      "type" : "string"
    }, {
      "name" : "deviceID",
      "type" : "DeviceID"
    }, {
      "name" : "cTime",
      "type" : "Time"
    }, {
      "name" : "mTime",
      "type" : "Time"
    }, {
      "name" : "encryptKey",
      "type" : "KID"
    }, {
      "name" : "verifyKey",
      "type" : "KID"
    } ]
  }, {
    "type" : "record",
    "name" : "Stream",
    "fields" : [ {
      "name" : "fd",
      "type" : "int"
    } ]
  }, {
    "type" : "enum",
    "name" : "LogLevel",
    "symbols" : [ "NONE_0", "DEBUG_1", "INFO_2", "NOTICE_3", "WARN_4", "ERROR_5", "CRITICAL_6", "FATAL_7" ]
  }, {
    "type" : "enum",
    "name" : "ClientType",
    "symbols" : [ "CLI_0", "GUI_1" ]
  }, {
    "type" : "record",
    "name" : "UserVersionVector",
    "fields" : [ {
      "name" : "id",
      "type" : "long"
    }, {
      "name" : "sigHints",
      "type" : "int"
    }, {
      "name" : "sigChain",
      "type" : "long"
    }, {
      "name" : "cachedAt",
      "type" : "Time"
    }, {
      "name" : "lastIdentifiedAt",
      "type" : "Time"
    } ]
  }, {
    "type" : "record",
    "name" : "UserPlusKeys",
    "fields" : [ {
      "name" : "uid",
      "type" : "UID"
    }, {
      "name" : "username",
      "type" : "string"
    }, {
      "name" : "deviceKeys",
      "type" : {
        "type" : "array",
        "items" : "PublicKey"
      }
    }, {
      "name" : "keys",
      "type" : {
        "type" : "array",
        "items" : "PublicKey"
      }
    }, {
      "name" : "uvv",
      "type" : "UserVersionVector"
    } ]
  }, {
    "type" : "fixed",
    "name" : "ED25519PublicKey",
    "size" : 32
  }, {
    "type" : "fixed",
    "name" : "ED25519Signature",
    "size" : 64
  }, {
    "type" : "record",
    "name" : "ED25519SignatureInfo",
    "fields" : [ {
      "name" : "sig",
      "type" : "ED25519Signature"
    }, {
      "name" : "publicKey",
      "type" : "ED25519PublicKey"
    } ]
  }, {
    "type" : "fixed",
    "name" : "Bytes32",
    "size" : 32
  }, {
    "type" : "fixed",
    "name" : "EncryptedBytes32",
    "size" : 48
  }, {
    "type" : "fixed",
    "name" : "BoxNonce",
    "size" : 24
  }, {
    "type" : "fixed",
    "name" : "BoxPublicKey",
    "size" : 32
  }, {
    "type" : "record",
    "name" : "CiphertextBundle",
    "fields" : [ {
      "name" : "kid",
      "type" : "KID"
    }, {
      "name" : "ciphertext",
      "type" : "EncryptedBytes32"
    }, {
      "name" : "nonce",
      "type" : "BoxNonce"
    }, {
      "name" : "ePublicKey",
      "type" : "BoxPublicKey"
    } ]
  }, {
    "type" : "record",
    "name" : "UnboxAnyRes",
    "fields" : [ {
      "name" : "kid",
      "type" : "KID"
    }, {
      "name" : "plaintext",
      "type" : "Bytes32"
    }, {
      "name" : "index",
      "type" : "int"
    } ]
  } ],
  "messages" : {
    "signED25519" : {
      "doc" : "Sign the given message (which should be small) using the device's private\n    signing ED25519 key, and return the signature as well as the corresponding\n    public key that can be used to verify the signature. The 'reason' parameter\n    is used as part of the SecretEntryArg object passed into\n    secretUi.getSecret().",
      "request" : [ {
        "name" : "msg",
        "type" : "bytes"
      }, {
        "name" : "reason",
        "type" : "string"
      } ],
      "response" : "ED25519SignatureInfo"
    },
    "signToString" : {
      "doc" : "Same as the above except the full marsheled and encoded NaclSigInfo.",
      "request" : [ {
        "name" : "msg",
        "type" : "bytes"
      }, {
        "name" : "reason",
        "type" : "string"
      } ],
      "response" : "string"
    },
    "unboxBytes32" : {
      "doc" : "Decrypt exactly 32 bytes using nacl/box with the given nonce, the given\n    peer's public key, and the device's private encryption key, and return the\n    decrypted data. The 'reason' parameter is used as part of the\n    SecretEntryArg object passed into secretUi.getSecret().",
      "request" : [ {
        "name" : "encryptedBytes32",
        "type" : "EncryptedBytes32"
      }, {
        "name" : "nonce",
        "type" : "BoxNonce"
      }, {
        "name" : "peersPublicKey",
        "type" : "BoxPublicKey"
      }, {
        "name" : "reason",
        "type" : "string"
      } ],
      "response" : "Bytes32"
    },
    "unboxBytes32Any" : {
      "request" : [ {
        "name" : "bundles",
        "type" : {
          "type" : "array",
          "items" : "CiphertextBundle"
        }
      }, {
        "name" : "reason",
        "type" : "string"
      } ],
      "response" : "UnboxAnyRes"
    }
  }
}